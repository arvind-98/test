
from pywinauto import Application

def select_dropdown_by_class(window_title, class_name, index, user_value):
    """
    Select a value from a dropdown using class name and index.

    :param window_title: Title of the application's main window.
    :param class_name: Class name of the dropdown control.
    :param index: Index of the dropdown control (if multiple instances).
    :param user_value: The value to select from the dropdown.
    """
    try:
        # Attach to the running application
        app = Application(backend="uia").connect(title=window_title)
        app_window = app.window(title=window_title)
        
        # Locate the dropdown control by class name and instance
        dropdown = app_window.child_window(class_name=class_name, control_type="ComboBox", found_index=index)
        
        # Expand the dropdown and select the value
        dropdown.expand()
        dropdown.select(user_value)
        print(f"Value '{user_value}' selected successfully.")
    except Exception as e:
        print(f"Error interacting with the dropdown: {e}")

# Example usage
window_title = "Investments"  # Replace with your application's window title
class_name = "ThunderRT6ComboBox"
index = 1  # Replace with the correct index of the dropdown if multiple exist
user_value = "Desired Value"  # Replace with the value to select

select_dropdown_by_class(window_title, class_name, index, user_value)

from pywinauto import Application

def print_all_controls(window_title):
    """
    Print all controls in the application window for debugging.
    
    :param window_title: Title of the application's main window.
    """
    try:
        app = Application(backend="uia").connect(title=window_title)
        app_window = app.window(title=window_title)
        app_window.print_control_identifiers()
    except Exception as e:
        print(f"Error accessing controls: {e}")

# Example usage
window_title = "Investments"  # Replace with your application's window title

print_all_controls(window_title)


import win32gui
import win32con

def find_window_and_control(window_title, control_id):
    hwnd = win32gui.FindWindow(None, window_title)  # Find the window by title
    if hwnd:
        ctrl = win32gui.FindWindowEx(hwnd, 0, None, None)  # Find control in the window
        return ctrl
    return None

def select_dropdown_item(window_title, control_id, user_value):
    hwnd = find_window_and_control(window_title, control_id)
    if hwnd:
        win32gui.SendMessage(hwnd, win32con.CB_SETCURSEL, user_value, 0)
        win32gui.SendMessage(hwnd, win32con.WM_COMMAND, win32con.CBN_SELCHANGE, hwnd)
        print(f"Selected value: {user_value}")
    else:
        print("Control not found.")



from pywinauto import Application

def select_dropdown_by_automation_id(app_path, window_title, automation_id, user_value):
    """
    Selects a value in a dropdown using AutomationId.
    
    :param app_path: Path to the application's executable.
    :param window_title: Title of the application's main window.
    :param automation_id: AutomationId of the dropdown control.
    :param user_value: The value to select from the dropdown.
    """
    # Launch the application or connect to it
    app = Application(backend="uia").start(app_path)  # Replace with app_path if app needs to be started
    app_window = app.window(title=window_title)
    
    # Ensure the window is active
    app_window.set_focus()

    # Locate the dropdown control by its AutomationId
    dropdown = app_window.child_window(auto_id=automation_id, control_type="ComboBox")
    
    # Expand the dropdown
    dropdown.expand()
    
    # Select the desired value
    try:
        dropdown.select(user_value)
        print(f"Value '{user_value}' selected successfully.")
    except Exception as e:
        print(f"Error selecting value '{user_value}': {e}")

# Example usage
app_path = "C:\\Path\\To\\Application.exe"  # Replace with the actual application path
window_title = "Investments"  # Replace with your application's window title
automation_id = "DropdownAutomationId"  # Replace with the AutomationId of the dropdown
user_value = "Desired Value"  # Replace with the value to select

select_dropdown_by_automation_id(app_path, window_title, automation_id, user_value)

from pywinauto import Application

def read_dropdown_values(window_title, automation_id):
    """
    Attach to a running application and read all values from a dropdown using AutomationId.

    :param window_title: Title of the application's main window.
    :param automation_id: AutomationId of the dropdown control.
    :return: List of dropdown values.
    """
    try:
        # Attach to the running application by window title
        app = Application(backend="uia").connect(title=window_title)
        app_window = app.window(title=window_title)
        
        # Locate the dropdown control by its AutomationId
        dropdown = app_window.child_window(auto_id=automation_id, control_type="ComboBox")
        
        # Read all values from the dropdown
        values = dropdown.texts()
        print("Dropdown values:", values)
        return values
    except Exception as e:
        print(f"Error reading dropdown values: {e}")
        return []

# Example usage
window_title = "Investments"  # Replace with your application's window title
automation_id = "DropdownAutomationId"  # Replace with the AutomationId of the dropdown

dropdown_values = read_dropdown_values(window_title, automation_id)
print("Available values:", dropdown_values)
